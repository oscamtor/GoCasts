package main

/* Do an HTTP request to google.com and print response to terminal
 */
import (
	"fmt"
	"io"
	"net/http"
	"os"
)

type logWriter struct{}

func main() {
	resp, err := http.Get("http://google.es")
	if err != nil {
		fmt.Println("Error:", err)
		os.Exit(1)
	}

	//(A)
	//fmt.Println(resp)

	//bs :=[]byte{}

	// (B)
	// bs := make([]byte, 99999)
	// resp.Body.Read(bs)
	// fmt.Println(string(bs))

	// (C)
	//io.Copy(os.Stdout, resp.Body)

	// (D)
	lw := logWriter{}
	io.Copy(lw, resp.Body)
}

// Creating this function i am achieving that type logWriter implement the Writer interface.
func (logWriter) Write(bs []byte) (int, error) {
	// Crap implementation that allow us compile but does not do the right thing of "writing"
	// return 1, nil

	// A good implementation that writes  to something (p.e. to console) external to our program.
	fmt.Println(string(bs))
	fmt.Println("Just wrote this many bytes:", len(bs))
	return len(bs), nil
}
